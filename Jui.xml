<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jui</name>
    </assembly>
    <members>
        <member name="T:HomeSeer.Jui.Forms.AbstractFormView">
            <inheritdoc />
            <summary>
            The base implementation for a JUI form
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Forms.AbstractFormView.FormType">
            <summary>
            The form's type and style.  See <see cref="T:HomeSeer.Jui.Types.EFormType"/> for more information about each type
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Forms.AbstractFormView.PositiveActionId">
             <summary>
             The ID that will be sent to the API when the continue button is clicked.
            <para>
             On an input form, all of the views on the form will be sent as id-value pairs.
             </para>
             </summary>
        </member>
        <member name="P:HomeSeer.Jui.Forms.AbstractFormView.NegativeActionId">
            <summary>
            The ID that will be sent to the API when the cancel/back button is clicked
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Forms.AbstractFormView.StepNumber">
            <summary>
            The number of the step in the wizard that this form represents
            <para>
            This is ignored when the form is presented by a button being clicked.
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Forms.AbstractFormView.TotalSteps">
            <summary>
            The total number of steps in the wizard
            <para>
            This is ignored when the form is presented by a button being clicked.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Forms.AbstractFormView.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of a form with an ID
            </summary>
            <param name="id">The unique ID for the form</param>
            <param name="name">The title of the form</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a view is created with an invalid Name</exception>
        </member>
        <member name="T:HomeSeer.Jui.Forms.InfoFormView">
            <inheritdoc />
            <summary>
            A form used for communicating information, like instructions, to the user.
            <para>This form only supports the use of label and image views.</para>
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Forms.InfoFormView.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of an info form with an ID and Name
            </summary>
            <param name="id">The unique ID of the form</param>
            <param name="name">The title of the form</param>
        </member>
        <member name="M:HomeSeer.Jui.Forms.InfoFormView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Forms.InfoFormView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="T:HomeSeer.Jui.Forms.InputFormView">
            <inheritdoc />
            <summary>
            A form used for collecting input from a user.
            <para>
            This form supports all view types except for buttons and view groups.
            </para>
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Forms.InputFormView.#ctor(System.String,System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of an input form with an ID and Name
            </summary>
            <param name="id">The unique ID of the form</param>
            <param name="name">The title of the form</param>
            <param name="positiveActionId">The ID that will be sent to the API when the continue button is clicked</param>
        </member>
        <member name="M:HomeSeer.Jui.Forms.InputFormView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Forms.InputFormView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="T:HomeSeer.Jui.Forms.ProgressFormView">
            <inheritdoc />
            <summary>
            A form used for indicating to the user that a task is running on the HomeSeer system
            and they should wait until it completes before performing any other tasks
            <para>
            This form only supports the use of label and image views
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Forms.ProgressFormView.UpdateInterval">
            <summary>
            The number of milliseconds to wait between calls to the API with the positive action id.
            The minimum allowed interval is 250ms and the maximum is 30000ms.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Forms.ProgressFormView.RetryCount">
            <summary>
            The number of times to call the API with the positive action id before canceling the process.
            A value of 0 indicates that the process should never time out.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Forms.ProgressFormView.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of a progress form with an ID and Name
            </summary>
            <param name="id">The ID of the form</param>
            <param name="name">The title of the form</param>
        </member>
        <member name="M:HomeSeer.Jui.Forms.ProgressFormView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Forms.ProgressFormView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="T:HomeSeer.Jui.Message">
            <summary>
            Instructions sent from a plugin to a client either take the shape of a form view or a message.
            Where a form view expects user interaction, a message does not.
            Messages are used for things like indicating what the current state of a long running task is so
            the client knows whether to continue waiting or not or for telling the client to load a particular
            URL using the default web browser.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Message.Code">
            <summary>
            The unique code indicating how this response message should be handled and the type of data contained within the content.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Message.Content">
            <summary>
            A message to display to the user or a URL that the client should navigate to
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Message.#ctor(System.Int32,System.String)">
            <summary>
            Create an instance of a message with a code and content
            </summary>
            <param name="code">The code of the message</param>
            <param name="content">The content of the message</param>
        </member>
        <member name="M:HomeSeer.Jui.Message.ToJsonString">
            <summary>
            Serialize the message as JSON
            </summary>
            <returns>A string containing the message formatted as JSON</returns>
        </member>
        <member name="T:HomeSeer.Jui.Message.Factory">
            <summary>
            Factory class for creating messages
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Message.Factory.CreateWaitMessage(System.String)">
             <summary>
             Create a new wait message.
            <para>
             This is used to indicate to a user that the action is being processed
             and they should continue to wait until it completes or times-out.
             </para>
             </summary>
             <param name="content">The message to display to the user</param>
             <returns>A new Message with a code of 102 for WAIT</returns>
        </member>
        <member name="M:HomeSeer.Jui.Message.Factory.CreateSuccessMessage(System.String)">
            <summary>
            Create a new success message.
            <para>
            This is used to indicate to a user that the action has completed successfully.
            </para>
            </summary>
            <param name="content">The message to display to the user</param>
            <returns>A new Message with a code of 200 for OK</returns>
        </member>
        <member name="M:HomeSeer.Jui.Message.Factory.CreateUrlMessage(System.String)">
            <summary>
            Create a new URL redirect message
            <para>
            This is used to indicate to a client that it should load the URL contained in the content.
            </para>
            </summary>
            <param name="url">The URL to load</param>
            <returns>A new Message with a code of 303 for REDIRECT</returns>
        </member>
        <member name="M:HomeSeer.Jui.Message.Factory.CreateFailMessage(System.String)">
            <summary>
            Create a new action failed message
            <para>
            This is used to indicate to a user that the action has failed to complete.
            </para>
            </summary>
            <param name="content">The message to display to the user</param>
            <returns>A new Message with a code of 500 for FAIL</returns>
        </member>
        <member name="M:HomeSeer.Jui.Message.Factory.FromJsonString(System.String)">
            <summary>
            Deserialize a JSON string to a message.
            <para>
            Plugins should never need to use this because clients shouldn't ever send a message back
            </para>
            </summary>
            <param name="jsonString">The JSON string containing the message</param>
            <returns>A Message</returns>
        </member>
        <member name="T:HomeSeer.Jui.Plugin">
            <summary>
            A plugin that is installed on the HomeSeer system
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Plugin.Id">
            <summary>
            A unique identifier for the plugin
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Plugin.Name">
            <summary>
            The name of the plugin.  This is the title shown to the user
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Plugin.Version">
            <summary>
            The version number of the plugin
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Plugin.IsEnabled">
            <summary>
            Whether the plugin is enabled or not
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Plugin.HasSettingsPages">
            <summary>
            Whether the plugin has settings pages or not
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Plugin.HelpPage">
            <summary>
            A URL pointing to the help documentation for the plugin
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Plugin.Pages">
            <summary>
            A list of feature pages registered by the plugin
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Plugin.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of a plugin with a unique ID and name
            <para>
            This plugin is initialized disabled
            </para>
            </summary>
            <param name="id">The unique ID of the plugin</param>
            <param name="name">The name of the plugin; the title shown to the user</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a Plugin is created with an invalid ID or Name</exception>
        </member>
        <member name="T:HomeSeer.Jui.Types.EFormType">
            <summary>
            The type that a form is set to determines what class a client application should deserialize it as.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EFormType.Info">
            <summary>
            A form used for communicating information, like instructions, to the user.
            See <see cref="T:HomeSeer.Jui.Forms.InfoFormView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EFormType.Input">
            <summary>
            A form used for collecting input from a user.  See <see cref="T:HomeSeer.Jui.Forms.InputFormView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EFormType.Progress">
            <summary>
            A form used for indicating to the user that a task is running on the HomeSeer system and they
            should wait until it completes before performing any other tasks.
            See <see cref="T:HomeSeer.Jui.Forms.ProgressFormView"/>
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EInputType">
            <summary>
            The input type determines the type of data that will be accepted by an input
            view and the keyboard that is shown to the user when they are typing in it.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Text">
            <summary>
            Used for text of any kind
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Number">
            <summary>
            Used for whole numbers
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Email">
            <summary>
            Used for Email Addresses in the format of *@*.*
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Url">
            <summary>
            Used for web addresses; values are parsed to ensure they are a valid URI
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Password">
            <summary>
            Used to mask secure text
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EInputType.Decimal">
            <summary>
            Used for decimal numbers
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EPageType">
            <summary>
            A page's type determines where it is published in HomeSeer and what kinds of tasks it is used for
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.Settings">
            <summary>
            A settings page is used to configure the way the plug-in behaves
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.Feature">
            <summary>
            A feature page is a page of content defined by a plug-in that introduces new
            functionality to the HomeSeer system and uses HS-JUI for the UI
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.FeatureHtml">
            <summary>
            An HTML feature page is a page of content defined by a plug-in that introduces new
            functionality to the HomeSeer system and uses HTML for the UI
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.Guide">
            <summary>
            A guided process, or step-by-step guide, is a page that will walk the user through a
            set of instructions in order to complete a particular task
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.DeviceInclude">
            <summary>
            A device inclusion process is a guided process that is specifically used to
            configure new devices to work with the HomeSeer software
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EPageType.DeviceConfig">
            <summary>
            These pages can be used to include customization options and procedures that can
            be executed by the user for a specific device
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.ESelectListType">
            <summary>
            The select list type determines how a select list view is displayed
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.ESelectListType.DropDown">
            <summary>
            Displays the select list as a traditional drop down list
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.ESelectListType.RadioList">
            <summary>
            Displays the select list as a collection of radio buttons
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EToggleType">
            <summary>
            The toggle type determines how it is displayed
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EToggleType.Switch">
            <summary>
            Display a toggle as a switch
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EToggleType.Checkbox">
            <summary>
            Display a toggle as a checkbox
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Types.EViewType">
            <summary>
            The type that a view is set to determines what class a client application will deserialize it as.
            Each view type has a different set of properties that specifies how it behaves and how it should
            be displayed to the user
            <para>
            Some view types are ignored by different page types.
            Refer to the page type you are using to determine what views are available for use.
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Undefined">
            <summary>
            No type is defined.  This will cause an error
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Group">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.ViewGroup"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Form">
            <summary>
            An <see cref="T:HomeSeer.Jui.Forms.AbstractFormView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Label">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.LabelView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.SelectList">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.SelectListView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Input">
            <summary>
            An <see cref="T:HomeSeer.Jui.Views.InputView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Toggle">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.ToggleView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Button">
            <summary>
            A <see cref="T:HomeSeer.Jui.Views.ButtonView"/>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Image">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.DateTime">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.MessageArchive">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Table">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Types.EViewType.Chart">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:HomeSeer.Jui.Views.AbstractView">
            <summary>
            The base implementation of a JUI view
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.AbstractView.Id">
            <summary>
            A unique identifier for this view.  You will need to use this to identify the view when HomeSeer 
            communicates changes to its values from a client.
            <para>
            For consistency and readability it is advised to use the format of COMPANY.PLUGIN.PAGE.VIEW
            </para>
            <para>
            For example: a LabelView on the first settings page in the Z-Wave Plugin
            might have an id of HomeSeer.ZWave.Settings1.InterfaceName
            </para>
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.AbstractView.Name">
            <summary>
            The name/title of this view
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.AbstractView.Type">
            <summary>
            The type of this view.
            <para>
            This is automatically configured
            </para>
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.AbstractView.HtmlIndent">
            <summary>
            Represents a tab/indent for formatting HTML
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.#ctor(System.String)">
            <summary>
            Create an instance of an AbstractView with an ID
            </summary>
            <param name="id">The unique ID for the AbstractView</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a view is created with an invalid ID</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.#ctor(System.String,System.String)">
            <summary>
            Create an instance of an AbstractView with an ID and Name
            </summary>
            <param name="id">The unique ID for the AbstractView</param>
            <param name="name">The name for the AbstractView</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a view is created with an invalid ID</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.GetStringValue">
            <summary>
            Get the value associated with this view as a string if there is one.
            </summary>
            <returns>
            The value stored in this view as a string or NULL if there is no value stored.
            </returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.Update(HomeSeer.Jui.Views.AbstractView)">
            <summary>
            Update the the user editable properties from a new version of the same view
            </summary>
            <param name="newViewState">
            The new state of the view being updated.
            This view's ID and Type must match the calling view exactly
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the new state of the view is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the new view's ID or Type don't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.UpdateValue(System.String)">
            <summary>
            Update the value of the view
            </summary>
            <param name="value">The new value</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.AbstractView.ToHtml(System.Int32)">
            <summary>
            Get a string representation of this view converted into HTML
            </summary>
            <returns>An HTML representation of the view as a string</returns>
        </member>
        <member name="T:HomeSeer.Jui.Views.ButtonView">
            <inheritdoc />
            <summary>
            A button is used to execute an action with the plugin.
            A plugin will then instruct the client on how to proceed by either responding
            with a message or a form to display to the user.  
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ButtonView.ActionId">
            <summary>
            The ID that will be sent to the API when this button is clicked
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ButtonView.#ctor(System.String,System.String,System.String)">
            <inheritdoc />
            <summary>
            Create an instance of a ButtonView with an ID, Name, and ActionID
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="actionId">The ID of the action sent when this button is clicked</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a view is created with an invalid Name or ActionId</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ButtonView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ButtonView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:HomeSeer.Jui.Views.InputView">
            <inheritdoc />
            <summary>
            An input view is an editable text box for the user to enter strings, numbers, etc.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.InputView.InputType">
            <summary>
            The style of input accepted by this field.
            This determines the keyboard the user is shown when on a mobile device.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.InputView.Value">
            <summary>
            The current value of the field
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.#ctor(System.String,System.String,HomeSeer.Jui.Types.EInputType)">
            <inheritdoc />
            <summary>
            Create a new instance of an InputView with an ID, a Name, and the specified style.
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="type">The style of the input. DEFAULT: <see cref="F:HomeSeer.Jui.Types.EInputType.Text"/></param>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.#ctor(System.String,System.String,System.String,HomeSeer.Jui.Types.EInputType)">
            <inheritdoc />
            <summary>
            Create a new instance of an InputView with an ID, a Name, a Value, and the specified style.
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View</param>
            <param name="value">The value inputted into the field</param>
            <param name="type">The style of the input. DEFAULT: <see cref="F:HomeSeer.Jui.Types.EInputType.Text"/></param>
            <exception cref="T:HomeSeer.Jui.Views.InvalidValueForTypeException">Thrown when the value is invalid for the input type</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc />
            <summary>
            Update the view to the new state.  This will change the inputted value 
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
            <exception cref="T:HomeSeer.Jui.Views.InvalidValueForTypeException">Thrown when the value is invalid for the input type</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.UpdateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.IsValueValidForType(System.String)">
            <summary>
            Check if the value is valid for the type set on the input view
            </summary>
            <param name="value">The value to check</param>
            <returns>TRUE if the value is valid for the type or FALSE if it is not</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Views.InputView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:HomeSeer.Jui.Views.InvalidValueForTypeException">
            <summary>
            The exception that is thrown when a value is invalid for a view's configured type
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.InvalidValueForTypeException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.InvalidValueForTypeException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.InvalidValueForTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.JsonDataException">
            <summary>
            The exception thrown when there is a problem serializing/deserializing JSON data
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor(System.Exception)">
            <summary>
            Create an exception with the default message that wraps another exception
            </summary>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.JsonDataException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.LabelView">
            <inheritdoc />
            <summary>
            Labels define static text displayed to the user.
            This can either be as a single set of text or as a combination of a name and value to indicate
            that a particular property is set to a given value.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.LabelView.Value">
            <summary>
            The value displayed; leave blank to just show the name
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of a Label with an ID and text value
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View; the text displayed by the label</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a label was created with an invalid name</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.#ctor(System.String,System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of a Label with an ID, Name, and text value
            </summary>
            <param name="id">The unique ID for the View</param>
            <param name="name">The name of the View; the title of the label</param>
            <param name="value">The text displayed by the label</param>
            <exception cref="T:System.ArgumentNullException">Thrown if both the name and value are empty</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Views.LabelView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:HomeSeer.Jui.Views.Page">
            <summary>
            A page is the primary container used to define a view for the user interface.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Id">
            <summary>
            A unique identifier for the page
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Name">
            <summary>
            The name that is displayed to the user for this page
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Type">
            <summary>
            The page's type; this determines where this page will present itself to the user.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Image">
            <summary>
            A Base64 encoded image used as an icon for this page
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.Views">
            <summary>
            The collection of views that are on this page.   This is for access only.
            Use <see cref="M:HomeSeer.Jui.Views.Page.AddView(HomeSeer.Jui.Views.AbstractView)"/> and <see cref="M:HomeSeer.Jui.Views.Page.UpdateViewById(HomeSeer.Jui.Views.AbstractView)"/> for setting views/updating them
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.ViewIds">
            <summary>
            A list of the IDs of the views in this group
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.Page.ViewCount">
            <summary>
            The number of views that are on this page.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.Page._views">
            <summary>
            The collection of views that are on this page.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.Page._viewIds">
            <summary>
            A set of IDs for the views on this page.  This is used to ensure that there are no duplicate IDs used.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.#ctor(System.String,System.String,HomeSeer.Jui.Types.EPageType)">
            <summary>
            Create a new instance of a Page of the specified type with an ID and Name
            </summary>
            <param name="id">The unique ID of the page</param>
            <param name="name">The name of the page; the title shown to the user</param>
            <param name="type">The type of the page</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a Page is created with an invalid ID or Name</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ToJsonString">
            <summary>
            Serialize the page as JSON
            </summary>
            <returns>A string containing the page formatted as JSON</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ToHtml(System.Int32)">
            <summary>
            Get a string representation of this page converted into HTML
            </summary>
            <returns>An HTML representation of the page as a string</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ToValueMap">
            <summary>
            Get a dictionary mapping IDs to values for the views on this page with mutable values.
            <para>
            These include: InputViews, SelectListViews, and ToggleViews
            </para>
            </summary>
            <returns>A Dictionary of view IDs to view values</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.MapViewIds">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.MapViewIds(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.AddView(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add a view to the page
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add multiple views to the page
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Set the list of views on this page
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.ContainsViewWithId(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.ContainsViewWithId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.GetViewById(System.String)">
            <summary>
            Get the view on the page with the given ID
            </summary>
            <param name="viewId">The ID of the view to get</param>
            <returns>
            The view with the specified ID as an <see cref="T:HomeSeer.Jui.Views.AbstractView"/>.
            This should be cast to the appropriate view type before use.
            </returns>
            <exception cref="T:System.ArgumentNullException">An invalid view ID was entered</exception>
            <exception cref="T:System.ArgumentException">No views are on the page to get</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view was not.  The page is probably malformed and should be recreated.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No views with that ID were found</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.UpdateViewById(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewById(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.UpdateViewValueById(System.String,System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewValueById(System.String,System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.RemoveAllViews">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveAllViews(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:HomeSeer.Jui.Views.Page.Factory">
            <summary>
            A factory class for creating pages
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateSettingPage(System.String,System.String)">
            <summary>
            Create a new settings page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Settings</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateFeaturePage(System.String,System.String)">
            <summary>
            Create a new feature page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Feature</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateDeviceIncPage(System.String,System.String)">
            <summary>
            Create a new device inclusion page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.DeviceInclude</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateDeviceConfigPage(System.String,System.String)">
            <summary>
            Create a new device configuration page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.DeviceConfig</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateGuidedProcessPage(System.String,System.String)">
            <summary>
            Create a new guided process page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.Guide</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.CreateHtmlFeaturePage(System.String,System.String)">
            <summary>
            Create a new HTML feature page
            </summary>
            <param name="id">The ID for the page</param>
            <param name="name">The name of the page</param>
            <returns>A new Page with its type set to EPageType.FeatureHtml</returns>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.FromJsonString(System.String)">
            <summary>
            Deserialize a JSON string to a page
            <para>
            This should always be wrapped in a try/catch in case the data received is malformed
            </para>
            </summary>
            <example>
            <code>
            public string SaveJuiPage(string pageContent) {
                try {
                    var page = Page.Factory.FromJsonString(pageContent);
                    foreach (var view in page.Views) {
                        //Process the update
                        //Save the update to the page in memory
                        PluginSettingsPage.UpdateViewById(view);
                    }
                } catch (JsonDataException exception) {
                    var errorMessage = Message.Factory.CreateFailMessage("There was a problem with the data received.  Please try again.");
                    return errorMessage.toJsonString();
                }
            }
            </code>
            </example>
            <param name="jsonString">The JSON string containing the page</param>
            <returns>A Page</returns>
            <exception cref="T:HomeSeer.Jui.Views.JsonDataException">Thrown when there was a problem deserializing the page</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.Page.Factory.PageListToHtml(System.Collections.Generic.List{System.String})">
            <summary>
            Convert a list of JSON pages into a tabbed HTML page.
            </summary>
            <param name="jsonPages">A list of pages serialized as JSON strings</param>
            <returns>A string containing a tabbed HTML page</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied list of pages is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the list of pages is empty</exception>
        </member>
        <member name="T:HomeSeer.Jui.Views.SelectListView">
            <inheritdoc />
            <summary>
            A selection list allows a user to pick a value from a predefined collection.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.Options">
            <summary>
            A list of options that the user can select from
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.Style">
            <summary>
            The display style for the list of options
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.SelectListView.Selection">
            <summary>
            The index of the currently selected option in the list
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.#ctor(System.String,System.String,System.Collections.Generic.List{System.String},HomeSeer.Jui.Types.ESelectListType,System.Int32)">
            <inheritdoc />
            <summary>
            Create a new instance of a select list with the default, drop down style, an ID, Name, and the specified list of options
            </summary>
            <param name="id">The unique ID for this View</param>
            <param name="name">The name of the view</param>
            <param name="options">The list of options</param>
            <param name="style">The display style of the select list. DEFAULT: drop down</param>
            <param name="selection">The index of the currently selected option in the list. DEFAULT: 0</param>
            <exception cref="T:System.ArgumentNullException">Thrown if select list is create with an invalid list of options</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if select list is created with an invalid index for the currently selected option</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc />
            <summary>
            Update the view to the new state.  This will change the selected option 
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.UpdateValue(System.String)">
            <inheritdoc />
            <exception cref="T:System.FormatException">Thrown when the value is not in the correct format</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Views.SelectListView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:HomeSeer.Jui.Views.ToggleView">
            <inheritdoc cref="T:HomeSeer.Jui.Views.AbstractView"/>
            <summary>
            A toggle switch is used to indicate a control that has only two possible operational states.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ToggleView.IsEnabled">
            <summary>
            The current state of the toggle switch
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ToggleView.ToggleType">
            <summary>
            The style of toggle
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.#ctor(System.String,System.String,System.Boolean)">
            <inheritdoc />
            <summary>
            Create a new instance of a toggle with an ID and Name
            </summary>
            <param name="id">The unique ID for the view</param>
            <param name="name">The name of the view</param>
            <param name="isEnabled">The state of the toggle. DEFAULT: false</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc />
            <summary>
            Update the view to the new state.  This will change the enabled state
            </summary>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when the new view's class doesn't match the calling view</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.UpdateValue(System.String)">
            <inheritdoc />
            <exception cref="T:System.FormatException">Thrown when the value is not in the correct format</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.GetStringValue">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ToggleView.ToHtml(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <summary>
            Add a view to a collection
            </summary>
            <param name="view">The view to add to the collection</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="toGroup">If the collection the view is being added it is a ViewGroup. DEFAULT: false for a Page</param>
            <exception cref="T:System.ArgumentNullException">The view or its ID is null</exception>
            <exception cref="T:System.ArgumentException">There is already a view with the same ID present in the collection</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to add a ViewGroup to another ViewGroup</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when a view group's type does not match its class</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add multiple views to a collection
            </summary>
            <param name="views">The views to add to the collection</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="toGroup">If the collection the views are being added it is a ViewGroup. DEFAULT: false for a Page</param>
            <exception cref="T:System.ArgumentNullException">The list of views is null</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Set the collection of views
            </summary>
            <param name="views">The new state of the collection</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="toGroup">If the collection the views are being added it is a ViewGroup. DEFAULT: false for a Page</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.ContainsViewWithId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Check to see if a view with a specific ID is present in a collection
            </summary>
            <param name="viewId">The ID of the view to look for</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <returns>TRUE if the view exists in the collection; FALSE if it does not exist in the collection</returns>
            <exception cref="T:System.ArgumentNullException">The viewId to look for is NULL</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view is not in the collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.GetViewById(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Get the view with a specific ID from a collection
            </summary>
            <param name="viewId">The ID of the view to look for</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <returns>The view with the specified ID</returns>
            <exception cref="T:System.ArgumentNullException">The viewId to look for is NULL</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view is not in the collection</exception>
            <exception cref="T:System.ArgumentException">There are no views in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewNotFoundException">No views with that ID were found in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewTypeMismatchException">Thrown when a view group's type does not match its class</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewById(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Perform a soft update to a view in a collection with a particular ID
            </summary>
            <param name="view">The new state of the view to update</param>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <exception cref="T:System.ArgumentNullException">The viewId to look for is NULL</exception>
            <exception cref="T:System.IndexOutOfRangeException">The ID was found, but the view is not in the collection</exception>
            <exception cref="T:System.ArgumentException">There are no views in the collection</exception>
            <exception cref="T:HomeSeer.Jui.Views.ViewNotFoundException">No views with that ID were found in the collection</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.MapViewIds(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)">
            <summary>
            Build a map of view IDs and list indexes for a collection of views
            </summary>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
            <param name="calledByGroup">Whether the method was called by a ViewGroup or not. Prevents infinite recursion.</param>
            <exception cref="T:System.ArgumentNullException">The list of views to map is null</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveAllViews(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Clear a collection of views
            </summary>
            <param name="viewList">A reference to the current list of views</param>
            <param name="viewIds">A reference to the map of view IDs and list indexes</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.ViewGroup">
            <inheritdoc />
            <summary>
            View groups define a vertical sub-grouping of views with a header.
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ViewGroup.Views">
            <summary>
            The views to display within this group.   This is for access only.
            Use <see cref="M:HomeSeer.Jui.Views.ViewGroup.AddView(HomeSeer.Jui.Views.AbstractView)"/> and <see cref="M:HomeSeer.Jui.Views.ViewGroup.UpdateViewById(HomeSeer.Jui.Views.AbstractView)"/> for setting views/updating them
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ViewGroup.ViewIds">
            <summary>
            A list of the IDs of the views in this group
            </summary>
        </member>
        <member name="P:HomeSeer.Jui.Views.ViewGroup.ViewCount">
            <summary>
            The number of views that are in this group.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.ViewGroup._views">
            <summary>
            The views to display within this group.
            </summary>
        </member>
        <member name="F:HomeSeer.Jui.Views.ViewGroup._viewIds">
            <summary>
            A set of IDs for the views in this group.  This is used to ensure that there are no duplicate IDs used.
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of a view group with an ID
            </summary>
            <param name="id">The unique ID of the group</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Create a new instance of a view group with an ID and Name
            </summary>
            <param name="id">The unique ID of the group</param>
            <param name="name">The unique ID of the name. DEFAULT: null</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.AddView(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddView(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add a view to the group
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.AddViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Add multiple views to the group
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView})">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.SetViews(System.Collections.Generic.IEnumerable{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
            <summary>
            Set the list of views in this group
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.ContainsViewWithId(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.ContainsViewWithId(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.GetViewById(System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.GetViewById(System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.GetStringValue">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Thrown to indicate that this ViewGroup contains other views</exception>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.UpdateViewById(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewById(HomeSeer.Jui.Views.AbstractView,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.UpdateViewValueById(System.String,System.String)">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.UpdateViewValueById(System.String,System.String,System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.MapViewIds">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.MapViewIds(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView},System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean)"/>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.Update(HomeSeer.Jui.Views.AbstractView)">
            <inheritdoc />
            <summary>
            Not used by ViewGroups
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewGroup.RemoveAllViews">
            <inheritdoc cref="M:HomeSeer.Jui.Views.ViewCollectionHelper.RemoveAllViews(System.Collections.Generic.List{HomeSeer.Jui.Views.AbstractView}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@)"/>
        </member>
        <member name="T:HomeSeer.Jui.Views.ViewNotFoundException">
            <summary>
            The exception that is thrown when a view is not found in a collection
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewNotFoundException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewNotFoundException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
        <member name="T:HomeSeer.Jui.Views.ViewTypeMismatchException">
            <summary>
            The exception that is thrown when a view's type doesn't match its class
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewTypeMismatchException.#ctor">
            <summary>
            Create an exception with the default message
            </summary>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewTypeMismatchException.#ctor(System.String)">
            <summary>
            Create an exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
        </member>
        <member name="M:HomeSeer.Jui.Views.ViewTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception wrapping another exception with a message
            </summary>
            <param name="message">The message to include with the exception</param>
            <param name="innerException">The exception to wrap</param>
        </member>
    </members>
</doc>
